---
import type { NavEntry } from "../lib/nav";

import { Icon } from "astro-icon";
import { Image } from "astro:assets";
import DocsSidebarNavEntry from "./DocsSidebarNavEntry.astro";
import type { ProductData } from "../lib/products";

interface Props {
	product: ProductData | undefined;
	entries: NavEntry[];
}

const { product, entries } = Astro.props;
---

<aside
	is="docs-sidebar"
	class="bg-stone-800 lg:bg-stone-900 fixed lg:sticky top-0 h-[100dvh] lg:top-[65px] z-10 p-8 w-full md:w-80 lg:h-[calc(100vh-4rem)] overflow-y-auto lg:text-sm"
>
	<button data-sidebar-close class="absolute top-4 right-4 lg:hidden">
		<span class="sr-only">Close navigation</span>
		<Icon name="jam:close" class="w-6 h-6 text-white" />
	</button>

	{
		product && (
			<a class="inline-block lg:hidden pb-4" href={product.href}>
				<Image src={product.logotype} alt={product.name} class="w-auto h-8" />
			</a>
		)
	}

	{
		entries.length && (
			<ol class="text-balance">
				{entries.map((entry) => (
					<DocsSidebarNavEntry {entry} />
				))}
			</ol>
		)
	}
</aside>

<script>
	function loadPos(): number {
		const pos = parseFloat(
			sessionStorage.getItem("docs-sidebar-scroll") || "0",
		);
		if (isNaN(pos)) return 0;
		return pos;
	}

	function savePos(pos: number) {
		sessionStorage.setItem("docs-sidebar-scroll", pos.toString());
	}

	class DocsSidebar extends HTMLElement {
		constructor() {
			super();

			// Maintain scroll position across page reloads
			this.scrollTop = loadPos();
			window.addEventListener("beforeunload", () => {
				savePos(this.scrollTop);
			});

			// If the active item is out of view, scroll so it is in the center
			const activeEl = this.querySelector<HTMLLIElement>("li[data-is-active]");
			if (activeEl) {
				const scrollRect = this.getBoundingClientRect();
				const activeRect = activeEl.getBoundingClientRect();

				const top = activeEl.offsetTop;
				const bottom = top - scrollRect.height + activeRect.height;

				if (this.scrollTop > top || this.scrollTop < bottom) {
					this.scrollTop = top - scrollRect.height / 2 + activeRect.height / 2;
				}
			} else {
				console.warn("docs-sidebar didn't find active link");
			}
		}
	}

	customElements.define("docs-sidebar", DocsSidebar, { extends: "aside" });
</script>
